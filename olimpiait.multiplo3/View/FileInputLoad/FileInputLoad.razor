@page "/fileupload/process"

@inject IJSRuntime js
@inject IFileReaderService fileReader
@inject olimpiait.multiplo3.ViewModel.FileInputLoad.Interfaces.IFileInputLoadViewModel fileInputModel


<h3>Procesar Archivo</h3>
<div class="row">
    <label for="inputAdjunto" autocomplete="off" class="col-sm-2 col-form-label">Seleccione Archivo</label>
    <div class="col-sm-8">
        <input type="file" accept=".txt"
               @ref="elementReference"
               @onchange="async ()=> await OpenFileAsync()"
               class="form-control-file"
               id="ajuntoFormControlFile">
    </div>
    <div class="col-sm-2" style="align-items: start">
        <button type="button" class="btn btn-primary" @onclick="@(_ => processFile())">Procesar</button>
    </div>
</div>
@if (liFileData != null && liFileData.Any())
{
    <MatTable Items="@sortedData" class="mat-elevation-z5" ShowPaging="true" UseSortHeaderRow="true" Style="width: 100%;">
        <MatTableHeader>
            <MatSortHeaderRow SortChanged="@SortData">
                <MatSortHeader SortId="Archivo"><span style="width:450px">Archivo</span></MatSortHeader>                                
                <MatSortHeader SortId="Fecha"><span style="width:450px">Fecha</span></MatSortHeader>
                <MatSortHeader><span style="width:100px"></span></MatSortHeader>
            </MatSortHeaderRow>
        </MatTableHeader>
        <MatTableRow Context="queriesContext">
            <td>@queriesContext.Archivo</td>
            <td>@queriesContext.Fecha</td>
            <td align="center">
                @*<MatFAB Style="background-color: #1B6EC2" Icon="@MatIconNames.View_compact" OnClick="@(_ => viewFile(queriesContext.Path))"></MatFAB>*@
                @*<a href="@queriesContext.Path" target="_blank">@queriesContext.Path</a>*@
                <MatButtonLink Icon="get_app" Href=@queriesContext.Path Target="_blank">Descargar</MatButtonLink>
            </td>
        </MatTableRow>
    </MatTable>
}

<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogContent>
        <table>
            <tr>
                <td align="left">
                    <MatProgressCircle Indeterminate="true" FourColored="true" />
                </td>
                <td>
                    @title
                </td>
            </tr>
        </table>
    </MatDialogContent>
</MatDialog>

@code {

    ElementReference elementReference;
    string fileName = string.Empty;
    string type = string.Empty;
    string size = string.Empty;
    Stream fileStream = null;
    string title = string.Empty;
    bool dialogIsOpen = false;
    public Response<string> respFileUpload = new Response<string>();
    public FileData filedata { get; set; }
    public List<FileData> liFileData { get; set; }
    public FileData[] sortedData = null;

    protected async override Task OnInitializedAsync()
    {
        await initialRequest();
    }

    private async Task processFile()
    {
        dialogIsOpen = true;
        title = "procesando archivo, por favor espere.";
        string newFileName = Guid.NewGuid().ToString() + ".txt";

        respFileUpload = await fileInputModel.fileInputProcess(fileStream, fileName, newFileName);
        if (respFileUpload.IsSuccess)
        {
            filedata = new FileData();
            filedata.Archivo = newFileName;
            filedata.Fecha = DateTime.Now;
            filedata.Path = respFileUpload.Data;
            liFileData.Add(filedata);

            string jsonModel = Newtonsoft.Json.JsonConvert.SerializeObject(liFileData).Replace("\"", "'");

            await js.InvokeVoidAsync("localStorage.setItem", "VIEWDATA", jsonModel);

            await initialRequest();

        }
        dialogIsOpen = false;
    }

    async Task OpenFileAsync()
    {
        var file = (await fileReader.CreateReference(elementReference).EnumerateFilesAsync()).FirstOrDefault();
        if (file == null) return;

        var fileInfo = await file.ReadFileInfoAsync();
        fileName = fileInfo.Name;
        size = $"{fileInfo.Size}b";
        type = fileInfo.Type;

        using (var memoryStream = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
        {
            fileStream = new MemoryStream(memoryStream.ToArray());
        }
    }

    private async Task initialRequest()
    {
        await js.InvokeVoidAsync("clearInput", "ajuntoFormControlFile");

        filedata = new FileData();
        liFileData = new List<FileData>();

        string jsonView = await js.InvokeAsync<string>("localStorage.getItem", "VIEWDATA");
        if (!string.IsNullOrEmpty(jsonView))
        {
            liFileData = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FileData>>(jsonView);
            sortedData = liFileData.ToArray();
        }
    }

    protected async Task viewFile(string LoadFile)
    {

    }

    void SortData(MatSortChangedEvent sort)
    {
        //sortedData = respQueriesRequests.ToArray();
        sortedData = liFileData.ToArray();
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)))
        {
            Comparison<FileData> comparison = null;
            switch (sort.SortId)
            {
                case "Archivo":
                    comparison = (s1, s2) => string.Compare(s1.Archivo, s2.Archivo, StringComparison.InvariantCultureIgnoreCase);
                    break;
                case "Fecha":
                    comparison = (s1, s2) => s1.Fecha.CompareTo(s2.Fecha);
                    break;
            }

            if (comparison != null)
            {
                if (sort.Direction == MatSortDirection.Desc)
                {
                    Array.Sort(sortedData, (s1, s2) => -1 * comparison(s1, s2));
                }
                else
                {
                    Array.Sort(sortedData, comparison);
                }
            }
        }
    }
}
